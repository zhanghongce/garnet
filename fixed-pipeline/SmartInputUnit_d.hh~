/*
 * Copyright (c) 2008 Princeton University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Niket Agarwal
 */

#ifndef __MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_SMART_INPUT_UNIT_D_HH__
#define __MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_SMART_INPUT_UNIT_D_HH__

#include "mem/ruby/network/garnet/fixed-pipeline/InputUnit_d.hh"
// this is not callable from python side
// we do not need allocate any dynamic variables
// no need virtual destructor of InputUnit_d
class SMART_Coordinate;

class SmartInputUnit_d : public InputUnit_d
{
  public:
    SmartInputUnit_d(int id, Router_d *router): InputUnit_d(id,router),m_in_flit_buffer(nullptr),smart_coor_pnt(nullptr) {}
	void virtual increment_credit(int in_vc, bool free_signal, Cycles curTime); 
	void virtual wakeup();
	void setInFlitBuffer(flitBuffer_d * _in_flit_buffer) { m_in_flit_buffer = _in_flit_buffer; }
	flitBuffer_d * getInFlitBuffer() { return  m_in_flit_buffer };
	void set_smart_coordinate(SMART_Coordinate * _smart_coor_pnt) { smart_coor_pnt = _smart_coor_pnt; }
	
	// TODO: FIXME: need to store Coor_pointer
  private:
	flitBuffer_d * m_in_flit_buffer;
	SMART_Coordinate * smart_coor_pnt;
};

#endif // __MEM_RUBY_NETWORK_GARNET_FIXED_PIPELINE_SMART_INPUT_UNIT_D_HH__
